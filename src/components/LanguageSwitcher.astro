---
import { getLangFromUrl } from '../i18n/utils';
import { languages } from '../i18n/ui';
import type { CollectionEntry } from 'astro:content';

interface Props {
  entryId?: string;
  allPosts?: CollectionEntry<'blog'>[];
}

const { entryId, allPosts } = Astro.props;
const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;

// Function to switch language in current path
function switchLanguage(newLang: string): string | null {
  // If we're on a blog post page and have the necessary data
  if (entryId && allPosts) {
    // Extract the post slug without language (e.g., "programacion/patrones-de-diseno/singleton/index.mdx")
    const [, ...slugParts] = entryId.split('/');
    const currentSlug = slugParts.join('/');

    // Try to find the translation
    const translation = allPosts.find(post => {
      const [postLang, ...postSlugParts] = post.id.split('/');
      const postSlug = postSlugParts.join('/');

      // Check if it's the same post in different language
      // We need to handle different folder names (e.g., "programacion" vs "programming")
      // So we compare the last parts (title slug)
      const currentLastPart = currentSlug.split('/').pop();
      const postLastPart = postSlug.split('/').pop();

      return postLang === newLang && currentLastPart === postLastPart;
    });

    if (translation) {
      // Build URL for the translation
      const [translationLang, ...translationSlugParts] = translation.id.split('/');
      const translationSlug = translationSlugParts.join('/').replace(/\/index\.(md|mdx)$/, '');
      return `/${translationLang}/blog/${translationSlug}`;
    } else {
      // No translation available
      return null;
    }
  }

  // Default behavior for non-blog pages
  const pathParts = currentPath.split('/').filter(p => p);

  // If first part is a language code, remove it
  if (pathParts.length > 0 && pathParts[0] in languages) {
    pathParts.shift();
  }

  // Build new path with new language
  return `/${newLang}${pathParts.length > 0 ? '/' + pathParts.join('/') : ''}`;
}

const availableLanguages = Object.entries(languages);
---

<div class="language-switcher">
  {availableLanguages.map(([code, name]) => {
    const url = switchLanguage(code);
    const isDisabled = url === null && currentLang !== code;
    const isActive = currentLang === code;

    return isDisabled ? (
      <span
        class="lang-btn disabled"
        aria-label={`${name} - No disponible`}
        title={`${name} - No disponible`}
      >
        {code.toUpperCase()}
      </span>
    ) : (
      <a
        href={url || '#'}
        class={`lang-btn ${isActive ? 'active' : ''}`}
        aria-label={`Cambiar a ${name}`}
        title={name}
        data-lang={code}
      >
        {code.toUpperCase()}
      </a>
    );
  })}
</div>

<script>
  // Save language preference when clicking on language switcher
  document.addEventListener('DOMContentLoaded', () => {
    const langButtons = document.querySelectorAll('.lang-btn:not(.disabled)');

    langButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const lang = (e.currentTarget as HTMLElement).getAttribute('data-lang');
        if (lang) {
          localStorage.setItem('preferred-language', lang);
        }
      });
    });
  });
</script>

<style>
  .language-switcher {
    display: flex;
    gap: 0.25rem;
    align-items: center;
    padding: 0.25rem;
    background: rgba(0, 107, 125, 0.15);
    border: 1px solid rgba(0, 107, 125, 0.4);
    border-radius: 6px;
  }

  .lang-btn {
    font-family: var(--font-primary);
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 0.05em;
    padding: 0.4rem 0.75rem;
    border-radius: 4px;
    text-decoration: none;
    color: var(--text-secondary);
    transition: all 0.3s ease;
    cursor: pointer;
    border: 1px solid transparent;
  }

  .lang-btn:hover {
    color: #00b8cc;
    background: rgba(0, 107, 125, 0.2);
    border-color: #008B9E;
    box-shadow: 0 0 8px rgba(0, 139, 158, 0.4);
  }

  .lang-btn.active {
    color: #ffffff;
    background: #006B7D;
    border-color: #008B9E;
    box-shadow: 0 0 12px rgba(0, 107, 125, 0.5);
    pointer-events: none;
  }

  .lang-btn.disabled {
    opacity: 0.3;
    cursor: not-allowed;
    color: var(--text-muted);
    border-color: transparent;
    background: rgba(0, 107, 125, 0.1);
  }

  .lang-btn.disabled:hover {
    color: var(--text-muted);
    background: rgba(0, 107, 125, 0.1);
    border-color: transparent;
    box-shadow: none;
    transform: none;
  }

  /* Light mode adjustments */
  :root.light-mode .lang-btn.active {
    color: #ffffff;
    background: #0088a0;
  }

  :root.light-mode .language-switcher {
    background: rgba(0, 136, 160, 0.15);
    border-color: rgba(0, 136, 160, 0.4);
  }
</style>
